library(dplyr)
library(readxl)
library(ggsci)
init_log(log_file = "RESULTS/Results_2.txt")
data <- read_from_excel(file = "DATA/PA_Pos.xlsx", sheet = 1,
corner_row = 4, corner_column = "F",
split_by = c("Column", "Ion Mode"))
modes <- construct_metabosets(exprs = data$exprs,
pheno_data = data$pheno_data,
feature_data = data$feature_data,
group_col = "Group")
mode <- modes$RP_POS
Prueba_mode <- modes$RP_POS
POS_raw_sambx <- plot_sample_boxplots(Prueba_mode, order_by = "Group", fill_by = "Group")
POS_raw_pca <- plot_pca(Prueba_mode, color = "QC")
POS_raw_pca + POS_raw_sambx
mode <- mark_nas(mode, value = 0)
mode <- flag_detection(mode, qc_limit = 0.80, group_limit = 0.75)
corrected <- correct_drift(mode)
corrected <- correct_drift(mode)
corrected <- flag_quality(corrected)
EI_corr_sambx <- plot_sample_boxplots(corrected, order_by = "Group", fill_by = "Group")
EI_corr_pca <- plot_pca(corrected, center = T)
EI_corr_pca + EI_corr_sambx
# Tercer método de corrección del efecto batch
#Instalación del paquete RUVSeq
#if (!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("RUVSeq")
#library(RUVSeq)
#Corrección del efecto batch mediante método RUVSeq (Removal of Unwanted variation)
#replicates <- list(which(corrected$QC == "QC"))
#batch_corrected <- ruvs_qc(corrected[["exprs"]], batch = "Batch")
#corrected_batch <- normalize_batches(corrected, batch = "Batch", group = "QC", ref_label = "QC")
corrected_no_blank <- flag_contaminants(corrected,
blank_col = "Group",
blank_label = "B",
flag_thresh = 0.8,
flag_label = "Contaminant")
corrected_no_blank <- corrected_no_blank[, corrected_no_blank$Group != "B"]
corrected_no_qc <- drop_qcs(corrected_no_blank)
View(corrected_no_qc)
View(corrected_no_qc@featureData@data)
EI_PCA_2<-plot_pca(corrected_no_qc, color = "Group")
EI_PCA_2
# To clean data
set.seed(8)
imputed <- impute_rf(corrected_no_qc)
no_flag <- drop_flagged(imputed)
# Extracting feature table (Expression data)
peak_Height <- exprs(no_flag)
# Extracting Phenotipic data
EI_pheno_data <- no_flag@phenoData@data
EI_feat_table_pca  <- t(peak_Height)
#Changing NA to 0
EI_feat_table_pca[is.na(EI_feat_table_pca)]=0
# Centering and Scaling features
EI_pca <- prcomp(EI_feat_table_pca, center = T, scale. = T)
scores <- EI_pca$x %>%               # Get PC coordinates
data.frame %>%                            # Convert to data frames
mutate(Sample_ID = rownames(.)) %>%       # Create a new column with the sample names
left_join(EI_pheno_data )                  # Adding metadata
ggplot(scores, aes(PC1, PC2, color = Group, shape = Group)) + geom_point(size = 3)  + guides(x=guide_axis(title = "PC 1 (70 %)"), y=guide_axis(title = "PC 2 (12 %)")) +
theme_classic()
# Save plot
ggsave('RESULTADOS/PA_Pos_2.png', width = 5, height = 4, device='png', dpi="print")
#"notame" output to find and filter height of identified metabolites
write_to_excel(no_flag, "RESULTS/PA_Pos.xlsx")
knitr::opts_chunk$set(echo = TRUE)
usethis::git_vaccinate()
data <- read_from_excel(file = "DATA/GN_Neg.xlsx", sheet = 1,
corner_row = 4, corner_column = "F",
split_by = c("Column", "Ion mode"))
data <- read_from_excel(file = "DATA/GN_Neg.xlsx", sheet = 1,
corner_row = 4, corner_column = "F",
split_by = c("Column", "Ion mode"))
init_log(log_file = "RESULTS/Results_2.txt")
data <- read_from_excel(file = "DATA/GN_Neg.xlsx", sheet = 1,
corner_row = 4, corner_column = "F",
split_by = c("Column", "Ion mode"))
data <- read_from_excel(file = "DATA/PA_Pos.xlsx", sheet = 1,
corner_row = 4, corner_column = "F",
split_by = c("Column", "Ion Mode"))
data <- read_from_excel(file = "DATA/GN_Neg.xlsx", sheet = 1,
corner_row = 4, corner_column = "F",
split_by = c("Column", "Ion Mode"))
modes <- construct_metabosets(exprs = data$exprs,
pheno_data = data$pheno_data,
feature_data = data$feature_data,
group_col = "Group")
mode <- modes$Rp_NEG
Prueba_mode <- modes$RP_NEG
NEG_raw_sambx <- plot_sample_boxplots(Prueba_mode, order_by = "Group", fill_by = "Group")
NEG_raw_pca <- plot_pca(Prueba_mode, color = "QC")
NEG_raw_pca + NEG_raw_sambx
mode <- mark_nas(mode, value = 0)
mode <- mark_nas(mode, value = 0)
mode <- mark_nas(mode, value = 0)
library(pcaMethods)
library(patchwork)
library(cowplot)
library(Rtsne)
library(ggdendro)
library(dplyr)
library(readxl)
library(ggsci)
library(notame)
library(Biobase)
library(BiocGenerics)
library(futile.logger)
library(ggplot2)
library(magrittr)
library(foreach)
library(iterators)
library(parallel)
library(doParallel)
Prueba_mode <- modes$RP_NEG
NEG_raw_sambx <- plot_sample_boxplots(Prueba_mode, order_by = "Group", fill_by = "Group")
NEG_raw_pca <- plot_pca(Prueba_mode, color = "QC")
NEG_raw_pca + NEG_raw_sambx
mode <- mark_nas(mode, value = 0)
mode <- flag_detection(mode, qc_limit = 0.80, group_limit = 0.75)
knitr::opts_chunk$set(echo = TRUE)
usethis::git_vaccinate()
```{r echo=TRUE, message=FALSE, warning=FALSE, error=FALSE, results='hide'}
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("antonvsdata/notame")
library(notame)
library(Biobase)
library(BiocGenerics)
library(futile.logger)
library(ggplot2)
library(magrittr)
library(foreach)
library(iterators)
library(parallel)
library(doParallel)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("pcaMethods")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biobase")
library(pcaMethods)
library(patchwork)
library(cowplot)
library(Rtsne)
library(ggdendro)
library(dplyr)
library(readxl)
library(ggsci)
init_log(log_file = "RESULTS/Results_2.txt")
data <- read_from_excel(file = "DATA/GN_Neg.xlsx", sheet = 1,
corner_row = 4, corner_column = "F",
split_by = c("Column", "Ion Mode"))
modes <- construct_metabosets(exprs = data$exprs,
pheno_data = data$pheno_data,
feature_data = data$feature_data,
group_col = "Group")
mode <- modes$RP_NEG
Prueba_mode <- modes$RP_NEG
NEG_raw_sambx <- plot_sample_boxplots(Prueba_mode, order_by = "Group", fill_by = "Group")
NEG_raw_pca <- plot_pca(Prueba_mode, color = "QC")
NEG_raw_pca + NEG_raw_sambx
Prueba_mode <- modes$RP_NEG
NEG_raw_sambx <- plot_sample_boxplots(Prueba_mode, order_by = "Group", fill_by = "Group")
NEG_raw_pca <- plot_pca(Prueba_mode, color = "QC")
NEG_raw_pca + NEG_raw_sambx
Prueba_mode <- modes$RP_NEG
NEG_raw_sambx <- plot_sample_boxplots(Prueba_mode, order_by = "Group", fill_by = "Group")
NEG_raw_pca <- plot_pca(Prueba_mode, color = "QC")
NEG_raw_pca + NEG_raw_sambx
mode <- modes$RP_NEG
Prueba_mode <- modes$RP_NEG
NEG_raw_sambx <- plot_sample_boxplots(Prueba_mode, order_by = "Group", fill_by = "Group")
NEG_raw_pca <- plot_pca(Prueba_mode, color = "QC")
NEG_raw_pca + NEG_raw_sambx
mode <- mark_nas(mode, value = 0)
mode <- flag_detection(mode, qc_limit = 0.80, group_limit = 0.75)
corrected <- correct_drift(mode)
corrected <- correct_drift(mode)
corrected <- flag_quality(corrected)
knitr::opts_chunk$set(echo = TRUE)
usethis::git_vaccinate()
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("antonvsdata/notame")
library(notame)
library(Biobase)
library(BiocGenerics)
library(futile.logger)
library(ggplot2)
library(magrittr)
library(foreach)
library(iterators)
library(parallel)
library(doParallel)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biobase")
library(pcaMethods)
library(patchwork)
library(cowplot)
library(Rtsne)
library(ggdendro)
library(dplyr)
library(readxl)
library(ggsci)
init_log(log_file = "RESULTS/Results_2.txt")
data <- read_from_excel(file = "DATA/GN_Neg.xlsx", sheet = 1,
corner_row = 4, corner_column = "F",
split_by = c("Column", "Ion Mode"))
modes <- construct_metabosets(exprs = data$exprs,
pheno_data = data$pheno_data,
feature_data = data$feature_data,
group_col = "Group")
mode <- modes$RP_NEG
Prueba_mode <- modes$RP_NEG
NEG_raw_sambx <- plot_sample_boxplots(Prueba_mode, order_by = "Group", fill_by = "Group")
NEG_raw_pca <- plot_pca(Prueba_mode, color = "QC")
NEG_raw_pca + NEG_raw_sambx
mode <- mark_nas(mode, value = 0)
mode <- flag_detection(mode, qc_limit = 0.80, group_limit = 0.75)
corrected <- correct_drift(mode)
corrected <- correct_drift(mode)
corrected <- flag_quality(corrected)
EI_corr_sambx <- plot_sample_boxplots(corrected, order_by = "Group", fill_by = "Group")
EI_corr_pca <- plot_pca(corrected, center = T)
EI_corr_pca + EI_corr_sambx
# Tercer método de corrección del efecto batch
#Instalación del paquete RUVSeq
#if (!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("RUVSeq")
#library(RUVSeq)
#Corrección del efecto batch mediante método RUVSeq (Removal of Unwanted variation)
#replicates <- list(which(corrected$QC == "QC"))
#batch_corrected <- ruvs_qc(corrected[["exprs"]], batch = "Batch")
#corrected_batch <- normalize_batches(corrected, batch = "Batch", group = "QC", ref_label = "QC")
corrected_no_blank <- flag_contaminants(corrected,
blank_col = "Group",
blank_label = "B",
flag_thresh = 0.8,
flag_label = "Contaminant")
corrected_no_blank <- corrected_no_blank[, corrected_no_blank$Group != "B"]
corrected_no_qc <- drop_qcs(corrected_no_blank)
View(corrected_no_qc)
View(corrected_no_qc@featureData@data)
corrected <- correct_drift(mode)
corrected <- correct_drift(mode)
corrected <- flag_quality(corrected, condition = "RSD_r < 0.1 & D_ratio_r < 1")
corrected_no_blank <- flag_contaminants(corrected,
blank_col = "Group",
blank_label = "B",
flag_thresh = 0.8,
flag_label = "Contaminant")
corrected_no_blank <- corrected_no_blank[, corrected_no_blank$Group != "B"]
corrected_no_qc <- drop_qcs(corrected_no_blank)
View(corrected_no_qc)
View(corrected_no_qc@featureData@data)
corrected <- correct_drift(mode)
corrected <- correct_drift(mode)
corrected <- flag_quality(corrected, condition = "RSD_r < 0.3& D_ratio_r < 5.3")
EI_corr_sambx <- plot_sample_boxplots(corrected, order_by = "Group", fill_by = "Group")
EI_corr_pca <- plot_pca(corrected, center = T)
EI_corr_pca + EI_corr_sambx
# Tercer método de corrección del efecto batch
#Instalación del paquete RUVSeq
#if (!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("RUVSeq")
#library(RUVSeq)
#Corrección del efecto batch mediante método RUVSeq (Removal of Unwanted variation)
#replicates <- list(which(corrected$QC == "QC"))
#batch_corrected <- ruvs_qc(corrected[["exprs"]], batch = "Batch")
#corrected_batch <- normalize_batches(corrected, batch = "Batch", group = "QC", ref_label = "QC")
corrected_no_blank <- flag_contaminants(corrected,
blank_col = "Group",
blank_label = "B",
flag_thresh = 0.8,
flag_label = "Contaminant")
corrected_no_blank <- corrected_no_blank[, corrected_no_blank$Group != "B"]
corrected_no_qc <- drop_qcs(corrected_no_blank)
View(corrected_no_qc)
View(corrected_no_qc@featureData@data)
EI_PCA_2<-plot_pca(corrected_no_qc, color = "Group")
EI_PCA_2
# To clean data
set.seed(8)
imputed <- impute_rf(corrected_no_qc)
no_flag <- drop_flagged(imputed)
# Extracting feature table (Expression data)
peak_Height <- exprs(no_flag)
# Extracting Phenotipic data
EI_pheno_data <- no_flag@phenoData@data
EI_feat_table_pca  <- t(peak_Height)
#Changing NA to 0
EI_feat_table_pca[is.na(EI_feat_table_pca)]=0
# Centering and Scaling features
EI_pca <- prcomp(EI_feat_table_pca, center = T, scale. = T)
scores <- EI_pca$x %>%               # Get PC coordinates
data.frame %>%                            # Convert to data frames
mutate(Sample_ID = rownames(.)) %>%       # Create a new column with the sample names
left_join(EI_pheno_data )                  # Adding metadata
ggplot(scores, aes(PC1, PC2, color = Group, shape = Group)) + geom_point(size = 3)  + guides(x=guide_axis(title = "PC 1 (64 %)"), y=guide_axis(title = "PC 2 (21 %)")) +
theme_classic()
# Save plot
ggsave('RESULTADOS/GN_Neg.png', width = 5, height = 4, device='png', dpi="print")
#"notame" output to find and filter height of identified metabolites
write_to_excel(no_flag, "RESULTS/GN_Neg.xlsx")
data <- read_from_excel(file = "DATA/PA_Neg.xlsx", sheet = 1,
corner_row = 4, corner_column = "F",
split_by = c("Column", "Ion Mode"))
modes <- construct_metabosets(exprs = data$exprs,
pheno_data = data$pheno_data,
feature_data = data$feature_data,
group_col = "Group")
mode <- modes$RP_NEG
Prueba_mode <- modes$RP_NEG
NEG_raw_sambx <- plot_sample_boxplots(Prueba_mode, order_by = "Group", fill_by = "Group")
NEG_raw_pca <- plot_pca(Prueba_mode, color = "QC")
NEG_raw_pca + NEG_raw_sambx
mode <- mark_nas(mode, value = 0)
mode <- flag_detection(mode, qc_limit = 0.80, group_limit = 0.75)
corrected <- correct_drift(mode)
corrected <- correct_drift(mode)
corrected <- flag_quality(corrected, condition = "RSD_r < 0.3& D_ratio_r < 5.3")
EI_corr_sambx <- plot_sample_boxplots(corrected, order_by = "Group", fill_by = "Group")
EI_corr_pca <- plot_pca(corrected, center = T)
EI_corr_pca + EI_corr_sambx
# Tercer método de corrección del efecto batch
#Instalación del paquete RUVSeq
#if (!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("RUVSeq")
#library(RUVSeq)
#Corrección del efecto batch mediante método RUVSeq (Removal of Unwanted variation)
#replicates <- list(which(corrected$QC == "QC"))
#batch_corrected <- ruvs_qc(corrected[["exprs"]], batch = "Batch")
#corrected_batch <- normalize_batches(corrected, batch = "Batch", group = "QC", ref_label = "QC")
corrected_no_blank <- flag_contaminants(corrected,
blank_col = "Group",
blank_label = "B",
flag_thresh = 0.8,
flag_label = "Contaminant")
corrected_no_blank <- corrected_no_blank[, corrected_no_blank$Group != "B"]
corrected_no_qc <- drop_qcs(corrected_no_blank)
View(corrected_no_qc)
View(corrected_no_qc@featureData@data)
corrected <- correct_drift(mode)
corrected <- correct_drift(mode)
corrected <- flag_quality(corrected, condition = "RSD_r < 0.6 & D_ratio_r < 1.0")
EI_corr_sambx <- plot_sample_boxplots(corrected, order_by = "Group", fill_by = "Group")
EI_corr_pca <- plot_pca(corrected, center = T)
EI_corr_pca + EI_corr_sambx
# Tercer método de corrección del efecto batch
#Instalación del paquete RUVSeq
#if (!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("RUVSeq")
#library(RUVSeq)
#Corrección del efecto batch mediante método RUVSeq (Removal of Unwanted variation)
#replicates <- list(which(corrected$QC == "QC"))
#batch_corrected <- ruvs_qc(corrected[["exprs"]], batch = "Batch")
#corrected_batch <- normalize_batches(corrected, batch = "Batch", group = "QC", ref_label = "QC")
corrected_no_blank <- flag_contaminants(corrected,
blank_col = "Group",
blank_label = "B",
flag_thresh = 0.8,
flag_label = "Contaminant")
corrected_no_blank <- corrected_no_blank[, corrected_no_blank$Group != "B"]
corrected_no_qc <- drop_qcs(corrected_no_blank)
View(corrected_no_qc)
View(corrected_no_qc@featureData@data)
corrected <- correct_drift(mode)
corrected <- correct_drift(mode)
corrected <- flag_quality(corrected, condition = "RSD_r < 1.0 & D_ratio_r < 1.5")
EI_corr_sambx <- plot_sample_boxplots(corrected, order_by = "Group", fill_by = "Group")
EI_corr_pca <- plot_pca(corrected, center = T)
EI_corr_pca + EI_corr_sambx
# Tercer método de corrección del efecto batch
#Instalación del paquete RUVSeq
#if (!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("RUVSeq")
#library(RUVSeq)
#Corrección del efecto batch mediante método RUVSeq (Removal of Unwanted variation)
#replicates <- list(which(corrected$QC == "QC"))
#batch_corrected <- ruvs_qc(corrected[["exprs"]], batch = "Batch")
#corrected_batch <- normalize_batches(corrected, batch = "Batch", group = "QC", ref_label = "QC")
corrected_no_blank <- flag_contaminants(corrected,
blank_col = "Group",
blank_label = "B",
flag_thresh = 0.8,
flag_label = "Contaminant")
corrected_no_blank <- corrected_no_blank[, corrected_no_blank$Group != "B"]
corrected_no_qc <- drop_qcs(corrected_no_blank)
View(corrected_no_qc)
View(corrected_no_qc)
View(corrected_no_qc@featureData@data)
corrected <- correct_drift(mode)
corrected <- correct_drift(mode)
corrected <- flag_quality(corrected, condition = "RSD_r < 0.6 & D_ratio_r < 1.0")
EI_corr_sambx <- plot_sample_boxplots(corrected, order_by = "Group", fill_by = "Group")
EI_corr_pca <- plot_pca(corrected, center = T)
EI_corr_pca + EI_corr_sambx
# Tercer método de corrección del efecto batch
#Instalación del paquete RUVSeq
#if (!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("RUVSeq")
#library(RUVSeq)
#Corrección del efecto batch mediante método RUVSeq (Removal of Unwanted variation)
#replicates <- list(which(corrected$QC == "QC"))
#batch_corrected <- ruvs_qc(corrected[["exprs"]], batch = "Batch")
#corrected_batch <- normalize_batches(corrected, batch = "Batch", group = "QC", ref_label = "QC")
corrected_no_blank <- flag_contaminants(corrected,
blank_col = "Group",
blank_label = "B",
flag_thresh = 0.8,
flag_label = "Contaminant")
corrected_no_blank <- corrected_no_blank[, corrected_no_blank$Group != "B"]
corrected_no_qc <- drop_qcs(corrected_no_blank)
EI_PCA_2<-plot_pca(corrected_no_qc, color = "Group")
EI_PCA_2
# To clean data
set.seed(8)
imputed <- impute_rf(corrected_no_qc)
no_flag <- drop_flagged(imputed)
# Extracting feature table (Expression data)
peak_Height <- exprs(no_flag)
# Extracting Phenotipic data
EI_pheno_data <- no_flag@phenoData@data
EI_feat_table_pca  <- t(peak_Height)
#Changing NA to 0
EI_feat_table_pca[is.na(EI_feat_table_pca)]=0
# Centering and Scaling features
EI_pca <- prcomp(EI_feat_table_pca, center = T, scale. = T)
scores <- EI_pca$x %>%               # Get PC coordinates
data.frame %>%                            # Convert to data frames
mutate(Sample_ID = rownames(.)) %>%       # Create a new column with the sample names
left_join(EI_pheno_data )                  # Adding metadata
ggplot(scores, aes(PC1, PC2, color = Group, shape = Group)) + geom_point(size = 3)  + guides(x=guide_axis(title = "PC 1 (56 %)"), y=guide_axis(title = "PC 2 (16 %)")) +
theme_classic()
# Save plot
ggsave('RESULTADOS/PA_Neg.png', width = 5, height = 4, device='png', dpi="print")
#"notame" output to find and filter height of identified metabolites
write_to_excel(no_flag, "RESULTS/PA_Neg.xlsx")
knitr::opts_chunk$set(echo = TRUE)
usethis::git_vaccinate()
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("antonvsdata/notame")
library(notame)
library(Biobase)
library(BiocGenerics)
library(futile.logger)
library(ggplot2)
library(magrittr)
library(foreach)
library(iterators)
library(parallel)
library(doParallel)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biobase")
library(pcaMethods)
library(patchwork)
library(cowplot)
library(Rtsne)
library(ggdendro)
library(dplyr)
library(readxl)
library(ggsci)
init_log(log_file = "RESULTS/Results_2.txt")
data <- read_from_excel(file = "DATA/PA_Neg.xlsx", sheet = 1,
corner_row = 4, corner_column = "F",
split_by = c("Column", "Ion Mode"))
modes <- construct_metabosets(exprs = data$exprs,
pheno_data = data$pheno_data,
feature_data = data$feature_data,
group_col = "Group")
mode <- modes$RP_NEG
Prueba_mode <- modes$RP_NEG
NEG_raw_sambx <- plot_sample_boxplots(Prueba_mode, order_by = "Group", fill_by = "Group")
NEG_raw_pca <- plot_pca(Prueba_mode, color = "QC")
NEG_raw_pca + NEG_raw_sambx
mode <- mark_nas(mode, value = 0)
mode <- flag_detection(mode, qc_limit = 0.80, group_limit = 0.75)
corrected <- correct_drift(mode)
corrected <- correct_drift(mode)
corrected <- flag_quality(corrected, condition = "RSD_r < 0.6 & D_ratio_r < 1.0")
corrected <- correct_drift(mode)
corrected <- correct_drift(mode)
corrected <- flag_quality(corrected, condition = "RSD_r < 0.6 & D_ratio_r < 1.0")
EI_corr_sambx <- plot_sample_boxplots(corrected, order_by = "Group", fill_by = "Group")
EI_corr_pca <- plot_pca(corrected, center = T)
EI_corr_pca + EI_corr_sambx
# Tercer método de corrección del efecto batch
#Instalación del paquete RUVSeq
#if (!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("RUVSeq")
#library(RUVSeq)
#Corrección del efecto batch mediante método RUVSeq (Removal of Unwanted variation)
#replicates <- list(which(corrected$QC == "QC"))
#batch_corrected <- ruvs_qc(corrected[["exprs"]], batch = "Batch")
#corrected_batch <- normalize_batches(corrected, batch = "Batch", group = "QC", ref_label = "QC")
